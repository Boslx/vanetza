#include <vanetza/btp/header.hpp>
#include <vanetza/common/its_aid.hpp>
#include <vanetza/common/manual_runtime.hpp>
#include <vanetza/geonet/router.hpp>
#include <vanetza/geonet/tests/fake_interfaces.hpp>
#include <vanetza/geonet/tests/security_context.hpp>

#ifndef VANETZA_ROUTERINDICATE_H
#define VANETZA_ROUTERINDICATE_H


class RouterIndicate {
public:
    RouterIndicate() : runtime(Clock::at("2010-12-23 18:29")), security(runtime), router(runtime, mib),
                       packet_drop_occurred(false) {
    }

    void SetUp() {
        runtime.trigger(Clock::at("2010-12-23 18:30"));
        geonet::Address gn_addr;
        gn_addr.mid(MacAddress{0, 0, 0, 0, 0, 1});
        router.set_address(gn_addr);
        router.set_access_interface(&req_ifc);
        router.set_transport_handler(geonet::UpperProtocol::BTP_B, &ind_ifc);
        router.set_transport_handler(geonet::UpperProtocol::IPv6, nullptr);
        router.set_security_entity(&security.entity());
        packet_drop_occurred = false;
        router.packet_dropped = [this](geonet::Router::PacketDropReason r) {
            drop_reason = r;
            packet_drop_occurred = true;
        };
        test_payload_trans = {47, 11, 1, 4, 42, 85};
        test_payload_sess = {55, 1, 16, 45, 2, 65};
        test_payload_pres = {33, 2, 6, 27, 75, 1};
        send_payload.insert(send_payload.end(), test_payload_trans.begin(), test_payload_trans.end());
        send_payload.insert(send_payload.end(), test_payload_sess.begin(), test_payload_sess.end());
        send_payload.insert(send_payload.end(), test_payload_pres.begin(), test_payload_pres.end());

        const ByteBuffer gn_buffer = {
            0x12, 0x00, 0x05, 0x01, 0x03, 0x81, 0x00, 0x40,
            0x03, 0x80, 0x56, 0x20, 0x50, 0x02, 0x80, 0x00,
            0x32, 0x01, 0x00, 0x14, 0x00, 0xfe, 0x38, 0x4c,
            0xe0, 0xb8, 0x90, 0xbf, 0x6b, 0x33, 0x44, 0x1f,
            0x45, 0x28, 0x40, 0x06, 0x64, 0x0c, 0x70, 0x81,
            0xae, 0x03, 0xbd, 0x00, 0x00, 0xa0, 0x00, 0x07,
            0xd1, 0x00, 0x00, 0x02, 0x02, 0x4c, 0xe0, 0xb8,
            0x90, 0x35, 0x71, 0x00, 0x5a, 0x9d, 0x42, 0x25,
            0xee, 0x35, 0xbb, 0xfc, 0x82, 0x4a, 0x24, 0x46,
            0xd8, 0x35, 0xa3, 0x54, 0x58, 0x3b, 0xe1, 0x21,
            0x00, 0x83, 0x02, 0x96, 0x8a, 0xaf, 0x33, 0xf0,
            0x81, 0xfe, 0x9a, 0x10, 0x3f, 0xa0, 0x14, 0x19,
            0x80, 0x40, 0x01, 0x24, 0x00, 0x01, 0xc8, 0x0b,
            0xba, 0xc9, 0x16, 0xae, 0x81, 0x01, 0x01, 0x80,
            0x03, 0x00, 0x80, 0x56, 0xdf, 0xd6, 0xd6, 0x27,
            0xa3, 0x62, 0xdc, 0x10, 0x83, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1d, 0xdf, 0xf7, 0xb5, 0x84, 0x00,
            0xa8, 0x01, 0x02, 0x80, 0x01, 0x24, 0x81, 0x04,
            0x03, 0x01, 0x00, 0x00, 0x80, 0x01, 0x25, 0x81,
            0x05, 0x04, 0x01, 0x90, 0x1a, 0x25, 0x80, 0x80,
            0x82, 0x04, 0x27, 0xbb, 0x27, 0xc9, 0x98, 0xc1,
            0xec, 0xa2, 0xb1, 0x0e, 0x71, 0x07, 0x98, 0x02,
            0x44, 0x51, 0x8b, 0x3c, 0x50, 0xa3, 0xa3, 0x27,
            0xb5, 0xb1, 0x90, 0xd0, 0x90, 0xf1, 0x45, 0x1f,
            0x3d, 0x80, 0x80, 0x83, 0xc2, 0xf3, 0xca, 0xeb,
            0xc7, 0xfa, 0x35, 0x94, 0x5c, 0x03, 0x0a, 0x5a,
            0xe0, 0x1a, 0x41, 0x7a, 0xdf, 0x6d, 0xff, 0xd5,
            0x41, 0xcc, 0xd2, 0xd9, 0x2b, 0xfe, 0xb6, 0x3d,
            0xc1, 0x56, 0x89, 0xcb, 0xd6, 0xb8, 0xe3, 0x2b,
            0xd5, 0xe8, 0x66, 0xd9, 0xfa, 0xa2, 0xfe, 0x55,
            0x95, 0xe2, 0xdb, 0xb9, 0xbe, 0x3e, 0x96, 0x5a,
            0x70, 0x94, 0x25, 0x8b, 0x4a, 0x24, 0x9d, 0xfb,
            0x75, 0x8a, 0x07, 0x80, 0x82, 0xf4, 0x4c, 0xc3,
            0xc3, 0xb1, 0x0c, 0xf7, 0x7c, 0xd9, 0x0c, 0x40,
            0xfe, 0xe7, 0x30, 0x40, 0xad, 0x0b, 0xb4, 0xf8,
            0x34, 0x55, 0x81, 0x37, 0xa6, 0x96, 0x81, 0x78,
            0xe0, 0x53, 0x09, 0x06, 0xf7, 0x4f, 0x14, 0x43,
            0x46, 0x88, 0x29, 0x6e, 0x22, 0xfe, 0xbb, 0x6f,
            0x8e, 0x21, 0xad, 0x51, 0x7e, 0xb0, 0x81, 0x9a,
            0x39, 0xf2, 0xaa, 0xd3, 0x37, 0x51, 0xf3, 0xab,
            0xde, 0xdd, 0x69, 0xfe, 0xaf
        };

        router.indicate(get_up_packet(gn_buffer), mac_address_sender, mac_address_destination);
    }

    std::unique_ptr<geonet::UpPacket> get_up_packet(const ByteBuffer &sec_packet_buffer) {
        // parse the data into UpPacket
        std::unique_ptr<geonet::UpPacket> up_packet(
            new geonet::UpPacket(CohesivePacket(sec_packet_buffer, OsiLayer::Network)));
        return up_packet;
    }

    MacAddress mac_address_sender = MacAddress{0xfe, 0x38, 0x4c, 0xe0, 0xb8, 0x90};
    MacAddress mac_address_destination = MacAddress{0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    geonet::ManagementInformationBase mib;
    ManualRuntime runtime;
    SecurityContext security;
    geonet::Router router;
    geonet::Router::PacketDropReason drop_reason;
    FakeRequestInterface req_ifc;
    FakeTransportInterface ind_ifc;
    ByteBuffer test_payload_trans;
    ByteBuffer test_payload_sess;
    ByteBuffer test_payload_pres;
    ByteBuffer send_payload;

private:
    bool packet_drop_occurred;
};


#endif //VANETZA_ROUTERINDICATE_H
